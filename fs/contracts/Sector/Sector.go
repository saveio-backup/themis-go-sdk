// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package store

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FileInfo is an auto generated low-level Go binding around an user-defined struct.
type FileInfo struct {
	FileHash       []byte
	FileOwner      common.Address
	FileDesc       []byte
	Privilege      uint64
	FileBlockNum   uint64
	FileBlockSize  uint64
	ProveInterval  uint64
	ProveTimes     uint64
	ExpiredHeight  *big.Int
	CopyNum        uint64
	Deposit        uint64
	FileProveParam []byte
	ProveBlockNum  uint64
	BlockHeight    *big.Int
	ValidFlag      bool
	StorageType    uint8
	RealFileSize   uint64
	PrimaryNodes   []common.Address
	CandidateNodes []common.Address
	BlocksRoot     []byte
	ProveLevel     uint8
	IsPlotFile     bool
	PlotInfo       PlotInfo
}

// PlotInfo is an auto generated low-level Go binding around an user-defined struct.
type PlotInfo struct {
	NumberID   uint64
	StartNonce uint64
	Nonces     uint64
}

// SectorInfo is an auto generated low-level Go binding around an user-defined struct.
type SectorInfo struct {
	NodeAddr         common.Address
	SectorID         uint64
	Size             uint64
	Used             uint64
	ProveLevel       uint8
	FirstProveHeight *big.Int
	NextProveHeight  *big.Int
	TotalBlockNum    uint64
	FileNum          uint64
	GroupNum         uint64
	IsPlots          bool
	FileList         [][]byte
}

// SectorRef is an auto generated low-level Go binding around an user-defined struct.
type SectorRef struct {
	NodeAddr common.Address
	SectorId uint64
}

// StoreMetaData contains all meta data concerning the Store contract.
var StoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"got\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"want\",\"type\":\"uint64\"}],\"name\":\"NotEmptySector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughSpace\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"got\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"want\",\"type\":\"uint64\"}],\"name\":\"NotEnoughVolume\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"OpError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumFsEvent\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sectorId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enumProveLevel\",\"name\":\"provLevel\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"size\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPlots\",\"type\":\"bool\"}],\"name\":\"CreateSectorEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumFsEvent\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sectorId\",\"type\":\"uint64\"}],\"name\":\"DeleteSectorEvent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"NodeAddr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"SectorID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Size\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Used\",\"type\":\"uint64\"},{\"internalType\":\"enumProveLevel\",\"name\":\"ProveLevel_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"FirstProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NextProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"TotalBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"FileNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"GroupNum\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"IsPlots\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"FileList\",\"type\":\"bytes[]\"}],\"internalType\":\"structSectorInfo\",\"name\":\"sectorInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"FileHash\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"FileOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"FileDesc\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"Privilege\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"FileBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"FileBlockSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ProveInterval\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ProveTimes\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"ExpiredHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"CopyNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Deposit\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"FileProveParam\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"ProveBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"BlockHeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ValidFlag\",\"type\":\"bool\"},{\"internalType\":\"enumStorageType\",\"name\":\"StorageType_\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"RealFileSize\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"PrimaryNodes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"CandidateNodes\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"BlocksRoot\",\"type\":\"bytes\"},{\"internalType\":\"enumProveLevel\",\"name\":\"ProveLevel_\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"IsPlotFile\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"NumberID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"StartNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Nonces\",\"type\":\"uint64\"}],\"internalType\":\"structPlotInfo\",\"name\":\"PlotInfo_\",\"type\":\"tuple\"}],\"internalType\":\"structFileInfo\",\"name\":\"fileInfo\",\"type\":\"tuple\"}],\"name\":\"AddFileToSector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"NodeAddr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"SectorID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Size\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Used\",\"type\":\"uint64\"},{\"internalType\":\"enumProveLevel\",\"name\":\"ProveLevel_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"FirstProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NextProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"TotalBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"FileNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"GroupNum\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"IsPlots\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"FileList\",\"type\":\"bytes[]\"}],\"internalType\":\"structSectorInfo\",\"name\":\"sectorInfo\",\"type\":\"tuple\"}],\"name\":\"AddSectorRefForFileInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"NodeAddr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"SectorID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Size\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Used\",\"type\":\"uint64\"},{\"internalType\":\"enumProveLevel\",\"name\":\"ProveLevel_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"FirstProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NextProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"TotalBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"FileNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"GroupNum\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"IsPlots\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"FileList\",\"type\":\"bytes[]\"}],\"internalType\":\"structSectorInfo\",\"name\":\"sectorInfo\",\"type\":\"tuple\"}],\"name\":\"CreateSector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"NodeAddr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"SectorID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Size\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Used\",\"type\":\"uint64\"},{\"internalType\":\"enumProveLevel\",\"name\":\"ProveLevel_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"FirstProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NextProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"TotalBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"FileNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"GroupNum\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"IsPlots\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"FileList\",\"type\":\"bytes[]\"}],\"internalType\":\"structSectorInfo\",\"name\":\"sectorInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"FileHash\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"FileOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"FileDesc\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"Privilege\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"FileBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"FileBlockSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ProveInterval\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ProveTimes\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"ExpiredHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"CopyNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Deposit\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"FileProveParam\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"ProveBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"BlockHeight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ValidFlag\",\"type\":\"bool\"},{\"internalType\":\"enumStorageType\",\"name\":\"StorageType_\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"RealFileSize\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"PrimaryNodes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"CandidateNodes\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"BlocksRoot\",\"type\":\"bytes\"},{\"internalType\":\"enumProveLevel\",\"name\":\"ProveLevel_\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"IsPlotFile\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"NumberID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"StartNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Nonces\",\"type\":\"uint64\"}],\"internalType\":\"structPlotInfo\",\"name\":\"PlotInfo_\",\"type\":\"tuple\"}],\"internalType\":\"structFileInfo\",\"name\":\"fileInfo\",\"type\":\"tuple\"}],\"name\":\"DeleteFileFromSector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"NodeAddr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"SectorId\",\"type\":\"uint64\"}],\"internalType\":\"structSectorRef\",\"name\":\"sectorRef\",\"type\":\"tuple\"}],\"name\":\"DeleteSecotr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"NodeAddr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"SectorId\",\"type\":\"uint64\"}],\"internalType\":\"structSectorRef\",\"name\":\"sectorRef\",\"type\":\"tuple\"}],\"name\":\"GetSectorInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"NodeAddr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"SectorID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Size\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Used\",\"type\":\"uint64\"},{\"internalType\":\"enumProveLevel\",\"name\":\"ProveLevel_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"FirstProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NextProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"TotalBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"FileNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"GroupNum\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"IsPlots\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"FileList\",\"type\":\"bytes[]\"}],\"internalType\":\"structSectorInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"GetSectorsForNode\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"NodeAddr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"SectorID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Size\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Used\",\"type\":\"uint64\"},{\"internalType\":\"enumProveLevel\",\"name\":\"ProveLevel_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"FirstProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NextProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"TotalBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"FileNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"GroupNum\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"IsPlots\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"FileList\",\"type\":\"bytes[]\"}],\"internalType\":\"structSectorInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"NodeAddr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"SectorID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Size\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"Used\",\"type\":\"uint64\"},{\"internalType\":\"enumProveLevel\",\"name\":\"ProveLevel_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"FirstProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NextProveHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"TotalBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"FileNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"GroupNum\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"IsPlots\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"FileList\",\"type\":\"bytes[]\"}],\"internalType\":\"structSectorInfo\",\"name\":\"sector\",\"type\":\"tuple\"}],\"name\":\"UpdateSectorInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractNode\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526000805462010000600160501b031916631388000017905534801561002857600080fd5b50613918806100386000396000f3fe608060405234801561001057600080fd5b50600436106100a25760003560e01c8063955f98b711610076578063c4d66de81161005b578063c4d66de814610131578063dcf7496014610144578063e3168f9e1461015757600080fd5b8063955f98b71461010b578063ba9210041461011e57600080fd5b806247c003146100a75780632384a6aa146100bc57806323de5b98146100cf5780632ba010d7146100e2575b600080fd5b6100ba6100b5366004612f86565b610177565b005b6100ba6100ca366004612f52565b61024f565b6100ba6100dd366004612fed565b6104a3565b6100f56100f0366004612fed565b610561565b604051610102919061357c565b60405180910390f35b6100ba610119366004612f86565b610949565b6100ba61012c366004612f52565b610a93565b6100ba61013f366004612f16565b610f16565b6100ba610152366004612f52565b610fc9565b61016a610165366004612eda565b611025565b60405161010291906133f4565b600061019083600001518460200151846000015161126a565b610100840180519192506101a38261373f565b6001600160401b0316905250608082015160e0840180516101c5908390613693565b6001600160401b031690525060a082015160808301516101e5919061363c565b836060018181516101f69190613693565b6001600160401b031690525080156102265761012083018051906102198261373f565b6001600160401b03169052505b6101008301516001600160401b031661024157600060c08401525b61024a8361024f565b505050565b80516001600160a01b03166000908152600160205260408120905b81546001600160401b038216101561047b5782602001516001600160401b031682826001600160401b0316815481106102b357634e487b7160e01b600052603260045260246000fd5b6000918252602090912060069091020154600160a01b90046001600160401b03161415610469578282826001600160401b03168154811061030457634e487b7160e01b600052603260045260246000fd5b60009182526020918290208351600692909202018054928401516001600160a01b039092166001600160e01b031990931692909217600160a01b6001600160401b0392831602178255604083015160018301805460608601519284166001600160801b031990911617600160401b9290931691909102919091178082556080840151919060ff60801b1916600160801b8360028111156103b457634e487b7160e01b600052602160045260246000fd5b021790555060a0820151600282015560c0820151600382015560e08201516004820180546101008501516101208601516101408701511515600160c01b0260ff60c01b196001600160401b03928316600160801b021668ffffffffffffffffff60801b19938316600160401b026001600160801b0319909516929096169190911792909217169290921791909117905561016082015180516104609160058401916020909101906122c0565b5090505061047b565b80610473816137d3565b91505061026a565b5081516001600160a01b03166000908152600160205260409020815461024a9190839061231d565b60006104ae82610561565b6101008101519091506001600160401b031615610509576101008101516040517f25a56d93000000000000000000000000000000000000000000000000000000008152610500916000916004016134a2565b60405180910390fd5b61051b826000015183602001516113a9565b7f4fca90fd1b1cd962cf67f21703f1380572181450811cdd09c4add7ed1cb0c12c6009433385602001516040516105559493929190613405565b60405180910390a15050565b60408051610180810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e0830182905261010083018290526101208301829052610140830191909152610160820152908201516001600160401b03166105eb5760405162461bcd60e51b81526004016105009061356c565b81516001600160a01b0316600090815260016020908152604080832080548251818502810185019093528083529192909190849084015b8282101561082457600084815260209081902060408051610180810182526006860290920180546001600160a01b0381168452600160a01b90046001600160401b0390811694840194909452600181015480851692840192909252600160401b820490931660608301529091906080830190600160801b900460ff1660028111156106bd57634e487b7160e01b600052602160045260246000fd5b60028111156106dc57634e487b7160e01b600052602160045260246000fd5b81526002820154602080830191909152600383015460408084019190915260048401546001600160401b038082166060860152600160401b820481166080860152600160801b82041660a0850152600160c01b900460ff16151560c084015260058401805482518185028101850190935280835260e090940193919290919060009084015b8282101561080d5783829060005260206000200180546107809061375f565b80601f01602080910402602001604051908101604052809291908181526020018280546107ac9061375f565b80156107f95780601f106107ce576101008083540402835291602001916107f9565b820191906000526020600020905b8154815290600101906020018083116107dc57829003601f168201915b505050505081526020019060010190610761565b505050508152505081526020019060010190610622565b50505050905060005b8151816001600160401b031610156108dd5783602001516001600160401b031682826001600160401b03168151811061087657634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160401b031614156108cb5781816001600160401b0316815181106108ba57634e487b7160e01b600052603260045260246000fd5b602002602001015192505050919050565b806108d5816137d3565b91505061082d565b50604080516101808101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201839052610100820183905261012082018390526101408201929092526101608101919091525b9392505050565b81604001516001600160401b03168160a00151826080015161096b919061363c565b836060015161097a9190613604565b6001600160401b031611156109bb576040517f6073072a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109f58360000151846020015160405180604001604052808660000151815260200186608001516001600160401b03168152506113bd565b61010084018051919250610a08826137d3565b6001600160401b031690525060a08201516080830151610a28919061363c565b83606001818151610a399190613604565b6001600160401b0316905250608082015160e084018051610a5b908390613604565b6001600160401b03169052508015610241576101208301805190610a7e826137d3565b6001600160401b031690525061024a8361024f565b600081602001516001600160401b031611610ac05760405162461bcd60e51b81526004016105009061355c565b600081604001516001600160401b031611610aed5760405162461bcd60e51b8152600401610500906134eb565b60005481516040517f668389940000000000000000000000000000000000000000000000000000000081526a01000000000000000000009092046001600160a01b031691636683899491610b43916004016133e6565b60206040518083038186803b158015610b5b57600080fd5b505afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190612ef8565b610baf5760405162461bcd60e51b8152600401610500906134db565b610be6604051806040016040528083600001516001600160a01b0316815260200183602001516001600160401b0316815250610561565b604001516001600160401b031615610c105760405162461bcd60e51b8152600401610500906134cb565b6000805482516040517f3778febe0000000000000000000000000000000000000000000000000000000081526a01000000000000000000009092046001600160a01b031691633778febe91610c67916004016133e6565b60e06040518083038186803b158015610c7f57600080fd5b505afa158015610c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb79190612f34565b90506000610cc883600001516115ea565b905081604001516001600160401b0316818460400151610ce89190613604565b6001600160401b03161115610d40578160400151818460400151610d0c9190613604565b6040517f95c91e8e00000000000000000000000000000000000000000000000000000000815260040161050092919061358d565b82516001600160a01b03908116600090815260016020818152604080842080548085018255908552938290208851600690950201805492890151949095166001600160e01b031990921691909117600160a01b6001600160401b0394851602178455860151908301805460608801519284166001600160801b031990911617600160401b9290931691909102919091178082556080860151869392909160ff60801b1916600160801b836002811115610e0957634e487b7160e01b600052602160045260246000fd5b021790555060a0820151600282015560c0820151600382015560e08201516004820180546101008501516101208601516101408701511515600160c01b0260ff60c01b196001600160401b03928316600160801b021668ffffffffffffffffff60801b19938316600160401b026001600160801b031990951692909616919091179290921716929092179190911790556101608201518051610eb59160058401916020909101906122c0565b5050507fc3aecd94f85ba0fad5908b524eaaa61cce4b92e04937d32d159f1d5bd8d029fb6008438560000151866020015187608001518860400151896101400151604051610f09979695949392919061343a565b60405180910390a1505050565b600054610100900460ff16610f315760005460ff1615610f35565b303b155b610f515760405162461bcd60e51b8152600401610500906134fb565b600054610100900460ff16158015610f73576000805461ffff19166101011790555b600080547fffff0000000000000000000000000000000000000000ffffffffffffffffffff166a01000000000000000000006001600160a01b038516021790558015610fc5576000805461ff00191690555b5050565b6000610fdd8260000151836020015161188a565b9050806110195760036040517fc8c84b2f00000000000000000000000000000000000000000000000000000000815260040161050091906134bd565b8151610fc5908361195b565b6001600160a01b0381166000908152600160209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561125f57600084815260209081902060408051610180810182526006860290920180546001600160a01b0381168452600160a01b90046001600160401b0390811694840194909452600181015480851692840192909252600160401b820490931660608301529091906080830190600160801b900460ff1660028111156110f857634e487b7160e01b600052602160045260246000fd5b600281111561111757634e487b7160e01b600052602160045260246000fd5b81526002820154602080830191909152600383015460408084019190915260048401546001600160401b038082166060860152600160401b820481166080860152600160801b82041660a0850152600160c01b900460ff16151560c084015260058401805482518185028101850190935280835260e090940193919290919060009084015b828210156112485783829060005260206000200180546111bb9061375f565b80601f01602080910402602001604051908101604052809291908181526020018280546111e79061375f565b80156112345780601f1061120957610100808354040283529160200191611234565b820191906000526020600020905b81548152906001019060200180831161121757829003601f168201915b50505050508152602001906001019061119c565b50505050815250508152602001906001019061105d565b505050509050919050565b6000806112778585611ad5565b905060005b816001600160401b0316816001600160401b0316101561139d5760006112a3878784611b14565b90506000806112b28388611cd0565b9150915080156113875782516001600160401b0390811660009081526003602052604080822054865184168352912080549192909190851690811061130757634e487b7160e01b600052603260045260246000fd5b60009182526020822060029091020190611321828261252c565b50600101805467ffffffffffffffff191690556001600160401b03831661134a57602084018890525b611355600182613678565b836001600160401b0316141561136d57604084018890525b6113788a8a86611eb2565b60019650505050505050610942565b5050508080611395906137d3565b91505061127c565b50600095945050505050565b6113b38282611f58565b610fc58282611fa6565b604080516060808201835260008083526020830182905292820152600080600061140c60405180604001604052808a6001600160a01b03168152602001896001600160401b0316815250610561565b6101208101519350905060606001600160401b03841661144e5760408051606081018252600180825260208201849052918101839052955093508392506115d1565b611459898986611b14565b80516001600160401b0316600090815260036020908152604080832080548251818502810185019093528083529499509293909291849084015b8282101561156a57838290600052602060002090600202016040518060400160405290816000820180546114c69061375f565b80601f01602080910402602001604051908101604052809291908181526020018280546114f29061375f565b801561153f5780601f106115145761010080835404028352916020019161153f565b820191906000526020600020905b81548152906001019060200180831161152257829003601f168201915b50505091835250506001918201546001600160401b0316602091820152918352929092019101611493565b505050509050600060029054906101000a90046001600160401b03166001600160401b0316815114156115cf57846115a1816137d3565b955050600193506040518060600160405280866001600160401b031681526020018381526020018381525095505b505b6115dd8989878a612112565b5090979650505050505050565b6001600160a01b0381166000908152600160209081526040808320805482518185028101850190935280835284938493929190849084015b8282101561182457600084815260209081902060408051610180810182526006860290920180546001600160a01b0381168452600160a01b90046001600160401b0390811694840194909452600181015480851692840192909252600160401b820490931660608301529091906080830190600160801b900460ff1660028111156116bd57634e487b7160e01b600052602160045260246000fd5b60028111156116dc57634e487b7160e01b600052602160045260246000fd5b81526002820154602080830191909152600383015460408084019190915260048401546001600160401b038082166060860152600160401b820481166080860152600160801b82041660a0850152600160c01b900460ff16151560c084015260058401805482518185028101850190935280835260e090940193919290919060009084015b8282101561180d5783829060005260206000200180546117809061375f565b80601f01602080910402602001604051908101604052809291908181526020018280546117ac9061375f565b80156117f95780601f106117ce576101008083540402835291602001916117f9565b820191906000526020600020905b8154815290600101906020018083116117dc57829003601f168201915b505050505081526020019060010190611761565b505050508152505081526020019060010190611622565b50505050905060005b81518110156118815781818151811061185657634e487b7160e01b600052603260045260246000fd5b6020026020010151604001518361186d9190613604565b925080611879816137b8565b91505061182d565b50909392505050565b60008061189684611025565b905060005b815181101561194e57846001600160a01b03168282815181106118ce57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b031614801561192c5750836001600160401b031682828151811061191557634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160401b0316145b1561193c57600192505050611955565b80611946816137b8565b91505061189b565b5060009150505b92915050565b6001600160a01b03828116600090815260016020818152604080842080548085018255908552938290208651600690950201805492870151949095166001600160e01b031990921691909117600160a01b6001600160401b0394851602178455840151908301805460608601519284166001600160801b031990911617600160401b9290931691909102919091178082556080840151849392909160ff60801b1916600160801b836002811115611a2257634e487b7160e01b600052602160045260246000fd5b021790555060a0820151600282015560c0820151600382015560e08201516004820180546101008501516101208601516101408701511515600160c01b0260ff60c01b196001600160401b03928316600160801b021668ffffffffffffffffff60801b19938316600160401b026001600160801b031990951692909616919091179290921716929092179190911790556101608201518051611ace9160058401916020909101906122c0565b5050505050565b600080611b076040518060400160405280866001600160a01b03168152602001856001600160401b0316815250610561565b6101200151949350505050565b611b41604051806060016040528060006001600160401b0316815260200160608152602001606081525090565b6000848484604051602001611b58939291906133a3565b6040516020818303038152906040529050600281604051611b7991906133da565b9081526040805191829003602090810183206060840190925281546001600160401b0316835260018201805491840191611bb29061375f565b80601f0160208091040260200160405190810160405280929190818152602001828054611bde9061375f565b8015611c2b5780601f10611c0057610100808354040283529160200191611c2b565b820191906000526020600020905b815481529060010190602001808311611c0e57829003601f168201915b50505050508152602001600282018054611c449061375f565b80601f0160208091040260200160405190810160405280929190818152602001828054611c709061375f565b8015611cbd5780601f10611c9257610100808354040283529160200191611cbd565b820191906000526020600020905b815481529060010190602001808311611ca057829003601f168201915b5050505050815250509150509392505050565b81516001600160401b03166000908152600360209081526040808320805482518185028101850190935280835284938493929190849084015b82821015611de05783829060005260206000209060020201604051806040016040529081600082018054611d3c9061375f565b80601f0160208091040260200160405190810160405280929190818152602001828054611d689061375f565b8015611db55780601f10611d8a57610100808354040283529160200191611db5565b820191906000526020600020905b815481529060010190602001808311611d9857829003601f168201915b50505091835250506001918201546001600160401b0316602091820152918352929092019101611d09565b505050509050805160001415611dfd576000809250925050611eab565b838051906020012085602001518051906020012014611e23576000809250925050611eab565b60005b8151816001600160401b03161015611ea157848051906020012082826001600160401b031681518110611e6957634e487b7160e01b600052603260045260246000fd5b602002602001015160000151805190602001201415611e8f57925060019150611eab9050565b80611e99816137d3565b915050611e26565b5060008092509250505b9250929050565b8051604051600091611eca91869186916020016133a3565b604051602081830303815290604052905081600282604051611eec91906133da565b908152604051602091819003820190208251815467ffffffffffffffff19166001600160401b039091161781558282015180519192611f3392600185019290910190612569565b5060408201518051611f4f916002840191602090910190612569565b50505050505050565b6000611f648383611ad5565b905060005b816001600160401b0316816001600160401b03161015611fa057611f8e84848361222a565b80611f98816137d3565b915050611f69565b50505050565b60005b6001600160a01b0383166000908152600160205260409020546001600160401b038216101561024a576001600160a01b038316600090815260016020526040902080546001600160401b03808516929190841690811061201957634e487b7160e01b600052603260045260246000fd5b6000918252602090912060069091020154600160a01b90046001600160401b03161415612100576001600160a01b038316600090815260016020526040902080546001600160401b03831690811061208157634e487b7160e01b600052603260045260246000fd5b60009182526020822060069091020180546001600160e01b031916815560018101805470ffffffffffffffffffffffffffffffffff1916905560028101829055600381018290556004810180547fffffffffffffff0000000000000000000000000000000000000000000000000016905590611ace60058301826125e9565b8061210a816137d3565b915050611fa9565b815160405160009161212a91879187916020016133a3565b60405160208183030381529060405290508260028260405161214c91906133da565b908152604051602091819003820190208251815467ffffffffffffffff19166001600160401b03909116178155828201518051919261219392600185019290910190612569565b50604082015180516121af916002840191602090910190612569565b505083516001600160401b031660009081526003602090815260408220805460018101825590835291819020855180518795506002909402909101926121f89284920190612569565b50602091909101516001909101805467ffffffffffffffff19166001600160401b039092169190911790555050505050565b6000838383604051602001612241939291906133a3565b604051602081830303815290604052905060028160405161226291906133da565b908152604051908190036020019020805467ffffffffffffffff19168155600061228f600183018261252c565b61229d60028301600061252c565b50506001600160401b0382166000908152600360205260408120611fa091612607565b82805482825590600052602060002090810192821561230d579160200282015b8281111561230d57825180516122fd918491602090910190612569565b50916020019190600101906122e0565b50612319929150612628565b5090565b8280548282559060005260206000209060060281019282156125205760005260206000209160060282015b8281111561252057825482546001600160a01b039091167fffffffffffffffffffffffff000000000000000000000000000000000000000082168117845584546001600160e01b031990921617600160a01b918290046001600160401b0390811690920217835560018085018054918501805492841667ffffffffffffffff1984168117825582546001600160801b031990941617600160401b9384900490941690920292909217808255915485928592600160801b9283900460ff1692909160ff60801b19169083600281111561243057634e487b7160e01b600052602160045260246000fd5b0217905550600282810154908201556003808301549082015560048083018054918301805467ffffffffffffffff1981166001600160401b0394851690811783558354600160401b908190048616026001600160801b031990921617178082558254600160801b908190049094169093027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff841681178255915460ff600160c01b918290041615150260ff60c01b1990921668ffffffffffffffffff60801b19909316929092171790556005808301805461250e9284019190612645565b50505091600601919060060190612348565b5061231992915061269b565b5080546125389061375f565b6000825580601f10612548575050565b601f016020900490600052602060002090810190612566919061271d565b50565b8280546125759061375f565b90600052602060002090601f01602090048101928261259757600085556125dd565b82601f106125b057805160ff19168380011785556125dd565b828001600101855582156125dd579182015b828111156125dd5782518255916020019190600101906125c2565b5061231992915061271d565b50805460008255906000526020600020908101906125669190612628565b50805460008255600202906000526020600020908101906125669190612732565b8082111561231957600061263c828261252c565b50600101612628565b82805482825590600052602060002090810192821561230d5760005260206000209182015b8281111561230d5782829080546126809061375f565b61268b929190612762565b509160010191906001019061266a565b808211156123195780546001600160e01b031916815560018101805470ffffffffffffffffffffffffffffffffff19169055600060028201819055600382018190556004820180547fffffffffffffff0000000000000000000000000000000000000000000000000016905561271460058301826125e9565b5060060161269b565b5b80821115612319576000815560010161271e565b80821115612319576000612746828261252c565b5060018101805467ffffffffffffffff19169055600201612732565b82805461276e9061375f565b90600052602060002090601f01602090048101928261279057600085556125dd565b82601f106127a157805485556125dd565b828001600101855582156125dd57600052602060002091601f016020900482015b828111156125dd5782548255916001019190600101906127c2565b60006127f06127eb846135b7565b61359b565b9050808382526020820190508285602086028201111561280f57600080fd5b60005b8581101561283b578161282588826128f0565b8452506020928301929190910190600101612812565b5050509392505050565b60006128536127eb846135b7565b9050808382526020820190508285602086028201111561287257600080fd5b60005b8581101561283b5781356001600160401b0381111561289357600080fd5b8086016128a08982612966565b855250506020928301929190910190600101612875565b60006128c56127eb846135da565b9050828152602081018484840111156128dd57600080fd5b6128e8848285613707565b509392505050565b80356119558161388e565b80516119558161388e565b600082601f83011261291757600080fd5b81356129278482602086016127dd565b949350505050565b600082601f83011261294057600080fd5b8135612927848260208601612845565b8035611955816138a2565b8051611955816138a2565b600082601f83011261297757600080fd5b81356129278482602086016128b7565b8035611955816138aa565b8035611955816138b3565b8035611955816138c0565b600061032082840312156129bb57600080fd5b6129c66102e061359b565b905081356001600160401b038111156129de57600080fd5b6129ea84828501612966565b82525060206129fb848483016128f0565b60208301525060408201356001600160401b03811115612a1a57600080fd5b612a2684828501612966565b6040830152506060612a3a84828501612ec4565b6060830152506080612a4e84828501612ec4565b60808301525060a0612a6284828501612ec4565b60a08301525060c0612a7684828501612ec4565b60c08301525060e0612a8a84828501612ec4565b60e083015250610100612a9f84828501612eb9565b61010083015250610120612ab584828501612ec4565b61012083015250610140612acb84828501612ec4565b610140830152506101608201356001600160401b03811115612aec57600080fd5b612af884828501612966565b61016083015250610180612b0e84828501612ec4565b610180830152506101a0612b2484828501612eb9565b6101a0830152506101c0612b3a84828501612950565b6101c0830152506101e0612b508482850161299d565b6101e083015250610200612b6684828501612ec4565b610200830152506102208201356001600160401b03811115612b8757600080fd5b612b9384828501612906565b610220830152506102408201356001600160401b03811115612bb457600080fd5b612bc084828501612906565b610240830152506102608201356001600160401b03811115612be157600080fd5b612bed84828501612966565b61026083015250610280612c0384828501612992565b610280830152506102a0612c1984828501612950565b6102a0830152506102c0612c2f84828501612ce7565b6102c08301525092915050565b600060e08284031215612c4e57600080fd5b612c5860e061359b565b90506000612c668484612ecf565b8252506020612c7784848301612ecf565b6020830152506040612c8b84828501612ecf565b6040830152506060612c9f84828501612ecf565b6060830152506080612cb384828501612ecf565b60808301525060a0612cc7848285016128fb565b60a08301525060c0612cdb848285016128fb565b60c08301525092915050565b600060608284031215612cf957600080fd5b612d03606061359b565b90506000612d118484612ec4565b8252506020612d2284848301612ec4565b6020830152506040612d3684828501612ec4565b60408301525092915050565b60006101808284031215612d5557600080fd5b612d6061018061359b565b90506000612d6e84846128f0565b8252506020612d7f84848301612ec4565b6020830152506040612d9384828501612ec4565b6040830152506060612da784828501612ec4565b6060830152506080612dbb84828501612992565b60808301525060a0612dcf84828501612eb9565b60a08301525060c0612de384828501612eb9565b60c08301525060e0612df784828501612ec4565b60e083015250610100612e0c84828501612ec4565b61010083015250610120612e2284828501612ec4565b61012083015250610140612e3884828501612950565b610140830152506101608201356001600160401b03811115612e5957600080fd5b612e658482850161292f565b6101608301525092915050565b600060408284031215612e8457600080fd5b612e8e604061359b565b90506000612e9c84846128f0565b8252506020612ead84848301612ec4565b60208301525092915050565b8035611955816138cd565b8035611955816138d3565b8051611955816138d3565b600060208284031215612eec57600080fd5b600061292784846128f0565b600060208284031215612f0a57600080fd5b6000612927848461295b565b600060208284031215612f2857600080fd5b60006129278484612987565b600060e08284031215612f4657600080fd5b60006129278484612c3c565b600060208284031215612f6457600080fd5b81356001600160401b03811115612f7a57600080fd5b61292784828501612d42565b60008060408385031215612f9957600080fd5b82356001600160401b03811115612faf57600080fd5b612fbb85828601612d42565b92505060208301356001600160401b03811115612fd757600080fd5b612fe3858286016129a8565b9150509250929050565b600060408284031215612fff57600080fd5b60006129278484612e72565b6000610942838361310a565b60006109428383613280565b61302c816136b0565b82525050565b61302c61303e826136b0565b6137f8565b600061304d825190565b808452602084019350836020820285016130678560200190565b8060005b8581101561309c5784840389528151613084858261300b565b94506020830160209a909a019992505060010161306b565b5091979650505050505050565b60006130b3825190565b808452602084019350836020820285016130cd8560200190565b8060005b8581101561309c57848403895281516130ea8582613017565b94506020830160209a909a01999250506001016130d1565b80151561302c565b6000613114825190565b80845260208401935061312b818560208601613713565b601f01601f19169290920192915050565b61302c816136e0565b61302c816136eb565b61302c816136f6565b6000613161825190565b61316f818560208601613713565b9290920192915050565b601581526000602082017f736563746f7220616c7265616479206578697374730000000000000000000000815291505b5060200190565b601381526000602082017f6e6f6465206e6f74207265676973746572656400000000000000000000000000815291506131a9565b601481526000602082017f736563746f722073697a652069732077726f6e67000000000000000000000000815291506131a9565b601181526000602082017f736563746f7249642069732077726f6e67000000000000000000000000000000815291506131a9565b601f81526000602082017f736563746f724964206d7573742062652067726561746572207468616e203000815291506131a9565b80516000906101808401906132958582613023565b5060208301516132a86020860182613382565b5060408301516132bb6040860182613382565b5060608301516132ce6060860182613382565b5060808301516132e16080860182613145565b5060a08301516132f460a086018261337c565b5060c083015161330760c086018261337c565b5060e083015161331a60e0860182613382565b5061010083015161332f610100860182613382565b50610120830151613344610120860182613382565b50610140830151613359610140860182613102565b506101608301518482036101608601526133738282613043565b95945050505050565b8061302c565b6001600160401b03811661302c565b61302c6001600160401b03821661380a565b60006133af8286613032565b6014820191506133bf8285613391565b6008820191506133cf8284613391565b506008019392505050565b60006109428284613157565b602081016119558284613023565b6020808252810161094281846130a9565b60808101613413828761313c565b613420602083018661337c565b61342d6040830185613023565b6133736060830184613382565b60e08101613448828a61313c565b613455602083018961337c565b6134626040830188613023565b61346f6060830187613382565b61347c6080830186613145565b61348960a0830185613382565b61349660c0830184613102565b98975050505050505050565b604081016134b0828561314e565b6109426020830184613382565b60208101611955828461314e565b6020808252810161195581613179565b60208082528101611955816131b0565b60208082528101611955816131e4565b6020808252810161195581602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201527f647920696e697469616c697a6564000000000000000000000000000000000000604082015260600190565b6020808252810161195581613218565b602080825281016119558161324c565b602080825281016109428184613280565b604081016134b08285613382565b60006135a660405190565b90506135b2828261378c565b919050565b60006001600160401b038211156135d0576135d0613858565b5060209081020190565b60006001600160401b038211156135f3576135f3613858565b601f19601f83011660200192915050565b60006001600160401b03821691506001600160401b0383169250826001600160401b030382111561363757613637613816565b500190565b60006001600160401b03821691506001600160401b0383169250816001600160401b03048311821515161561367357613673613816565b500290565b6000825b92508282101561368e5761368e613816565b500390565b60006001600160401b03821691506001600160401b03831661367c565b60006001600160a01b038216611955565b6000611955826136b0565b806135b28161386e565b806135b28161387e565b6000611955826136cc565b6000611955826136d6565b60006001600160401b038216611955565b82818337506000910152565b60005b8381101561372e578181015183820152602001613716565b83811115611fa05750506000910152565b6001600160401b031660008161375757613757613816565b506000190190565b60028104600182168061377357607f821691505b6020821081141561378657613786613842565b50919050565b601f19601f83011681018181106001600160401b03821117156137b1576137b1613858565b6040525050565b60006000198214156137cc576137cc613816565b5060010190565b60006001600160401b03821691506001600160401b038214156137cc576137cc613816565b60006119558260006119558260601b90565b60006119558260c01b90565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600a81106125665761256661382c565b600381106125665761256661382c565b613897816136b0565b811461256657600080fd5b801515613897565b613897816136c1565b6003811061256657600080fd5b6002811061256657600080fd5b80613897565b6001600160401b03811661389756fea2646970667358221220057cf84d576f9c92071be26078ad2e8479f70a280998a53664b75dc39bfac38d64736f6c63430008040033",
}

// StoreABI is the input ABI used to generate the binding from.
// Deprecated: Use StoreMetaData.ABI instead.
var StoreABI = StoreMetaData.ABI

// StoreBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StoreMetaData.Bin instead.
var StoreBin = StoreMetaData.Bin

// DeployStore deploys a new Ethereum contract, binding an instance of Store to it.
func DeployStore(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Store, error) {
	parsed, err := StoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StoreBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// Store is an auto generated Go binding around an Ethereum contract.
type Store struct {
	StoreCaller     // Read-only binding to the contract
	StoreTransactor // Write-only binding to the contract
	StoreFilterer   // Log filterer for contract events
}

// StoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoreSession struct {
	Contract     *Store            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoreCallerSession struct {
	Contract *StoreCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoreTransactorSession struct {
	Contract     *StoreTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoreRaw struct {
	Contract *Store // Generic contract binding to access the raw methods on
}

// StoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoreCallerRaw struct {
	Contract *StoreCaller // Generic read-only contract binding to access the raw methods on
}

// StoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoreTransactorRaw struct {
	Contract *StoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStore creates a new instance of Store, bound to a specific deployed contract.
func NewStore(address common.Address, backend bind.ContractBackend) (*Store, error) {
	contract, err := bindStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// NewStoreCaller creates a new read-only instance of Store, bound to a specific deployed contract.
func NewStoreCaller(address common.Address, caller bind.ContractCaller) (*StoreCaller, error) {
	contract, err := bindStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoreCaller{contract: contract}, nil
}

// NewStoreTransactor creates a new write-only instance of Store, bound to a specific deployed contract.
func NewStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*StoreTransactor, error) {
	contract, err := bindStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoreTransactor{contract: contract}, nil
}

// NewStoreFilterer creates a new log filterer instance of Store, bound to a specific deployed contract.
func NewStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*StoreFilterer, error) {
	contract, err := bindStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoreFilterer{contract: contract}, nil
}

// bindStore binds a generic wrapper to an already deployed contract.
func bindStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.StoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.contract.Transact(opts, method, params...)
}

// GetSectorInfo is a free data retrieval call binding the contract method 0x2ba010d7.
//
// Solidity: function GetSectorInfo((address,uint64) sectorRef) view returns((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]))
func (_Store *StoreCaller) GetSectorInfo(opts *bind.CallOpts, sectorRef SectorRef) (SectorInfo, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "GetSectorInfo", sectorRef)

	if err != nil {
		return *new(SectorInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(SectorInfo)).(*SectorInfo)

	return out0, err

}

// GetSectorInfo is a free data retrieval call binding the contract method 0x2ba010d7.
//
// Solidity: function GetSectorInfo((address,uint64) sectorRef) view returns((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]))
func (_Store *StoreSession) GetSectorInfo(sectorRef SectorRef) (SectorInfo, error) {
	return _Store.Contract.GetSectorInfo(&_Store.CallOpts, sectorRef)
}

// GetSectorInfo is a free data retrieval call binding the contract method 0x2ba010d7.
//
// Solidity: function GetSectorInfo((address,uint64) sectorRef) view returns((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]))
func (_Store *StoreCallerSession) GetSectorInfo(sectorRef SectorRef) (SectorInfo, error) {
	return _Store.Contract.GetSectorInfo(&_Store.CallOpts, sectorRef)
}

// GetSectorsForNode is a free data retrieval call binding the contract method 0xe3168f9e.
//
// Solidity: function GetSectorsForNode(address nodeAddr) view returns((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[])[])
func (_Store *StoreCaller) GetSectorsForNode(opts *bind.CallOpts, nodeAddr common.Address) ([]SectorInfo, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "GetSectorsForNode", nodeAddr)

	if err != nil {
		return *new([]SectorInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]SectorInfo)).(*[]SectorInfo)

	return out0, err

}

// GetSectorsForNode is a free data retrieval call binding the contract method 0xe3168f9e.
//
// Solidity: function GetSectorsForNode(address nodeAddr) view returns((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[])[])
func (_Store *StoreSession) GetSectorsForNode(nodeAddr common.Address) ([]SectorInfo, error) {
	return _Store.Contract.GetSectorsForNode(&_Store.CallOpts, nodeAddr)
}

// GetSectorsForNode is a free data retrieval call binding the contract method 0xe3168f9e.
//
// Solidity: function GetSectorsForNode(address nodeAddr) view returns((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[])[])
func (_Store *StoreCallerSession) GetSectorsForNode(nodeAddr common.Address) ([]SectorInfo, error) {
	return _Store.Contract.GetSectorsForNode(&_Store.CallOpts, nodeAddr)
}

// AddFileToSector is a paid mutator transaction binding the contract method 0x955f98b7.
//
// Solidity: function AddFileToSector((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sectorInfo, (bytes,address,bytes,uint64,uint64,uint64,uint64,uint64,uint256,uint64,uint64,bytes,uint64,uint256,bool,uint8,uint64,address[],address[],bytes,uint8,bool,(uint64,uint64,uint64)) fileInfo) returns()
func (_Store *StoreTransactor) AddFileToSector(opts *bind.TransactOpts, sectorInfo SectorInfo, fileInfo FileInfo) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "AddFileToSector", sectorInfo, fileInfo)
}

// AddFileToSector is a paid mutator transaction binding the contract method 0x955f98b7.
//
// Solidity: function AddFileToSector((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sectorInfo, (bytes,address,bytes,uint64,uint64,uint64,uint64,uint64,uint256,uint64,uint64,bytes,uint64,uint256,bool,uint8,uint64,address[],address[],bytes,uint8,bool,(uint64,uint64,uint64)) fileInfo) returns()
func (_Store *StoreSession) AddFileToSector(sectorInfo SectorInfo, fileInfo FileInfo) (*types.Transaction, error) {
	return _Store.Contract.AddFileToSector(&_Store.TransactOpts, sectorInfo, fileInfo)
}

// AddFileToSector is a paid mutator transaction binding the contract method 0x955f98b7.
//
// Solidity: function AddFileToSector((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sectorInfo, (bytes,address,bytes,uint64,uint64,uint64,uint64,uint64,uint256,uint64,uint64,bytes,uint64,uint256,bool,uint8,uint64,address[],address[],bytes,uint8,bool,(uint64,uint64,uint64)) fileInfo) returns()
func (_Store *StoreTransactorSession) AddFileToSector(sectorInfo SectorInfo, fileInfo FileInfo) (*types.Transaction, error) {
	return _Store.Contract.AddFileToSector(&_Store.TransactOpts, sectorInfo, fileInfo)
}

// AddSectorRefForFileInfo is a paid mutator transaction binding the contract method 0xdcf74960.
//
// Solidity: function AddSectorRefForFileInfo((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sectorInfo) returns()
func (_Store *StoreTransactor) AddSectorRefForFileInfo(opts *bind.TransactOpts, sectorInfo SectorInfo) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "AddSectorRefForFileInfo", sectorInfo)
}

// AddSectorRefForFileInfo is a paid mutator transaction binding the contract method 0xdcf74960.
//
// Solidity: function AddSectorRefForFileInfo((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sectorInfo) returns()
func (_Store *StoreSession) AddSectorRefForFileInfo(sectorInfo SectorInfo) (*types.Transaction, error) {
	return _Store.Contract.AddSectorRefForFileInfo(&_Store.TransactOpts, sectorInfo)
}

// AddSectorRefForFileInfo is a paid mutator transaction binding the contract method 0xdcf74960.
//
// Solidity: function AddSectorRefForFileInfo((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sectorInfo) returns()
func (_Store *StoreTransactorSession) AddSectorRefForFileInfo(sectorInfo SectorInfo) (*types.Transaction, error) {
	return _Store.Contract.AddSectorRefForFileInfo(&_Store.TransactOpts, sectorInfo)
}

// CreateSector is a paid mutator transaction binding the contract method 0xba921004.
//
// Solidity: function CreateSector((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sectorInfo) returns()
func (_Store *StoreTransactor) CreateSector(opts *bind.TransactOpts, sectorInfo SectorInfo) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "CreateSector", sectorInfo)
}

// CreateSector is a paid mutator transaction binding the contract method 0xba921004.
//
// Solidity: function CreateSector((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sectorInfo) returns()
func (_Store *StoreSession) CreateSector(sectorInfo SectorInfo) (*types.Transaction, error) {
	return _Store.Contract.CreateSector(&_Store.TransactOpts, sectorInfo)
}

// CreateSector is a paid mutator transaction binding the contract method 0xba921004.
//
// Solidity: function CreateSector((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sectorInfo) returns()
func (_Store *StoreTransactorSession) CreateSector(sectorInfo SectorInfo) (*types.Transaction, error) {
	return _Store.Contract.CreateSector(&_Store.TransactOpts, sectorInfo)
}

// DeleteFileFromSector is a paid mutator transaction binding the contract method 0x0047c003.
//
// Solidity: function DeleteFileFromSector((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sectorInfo, (bytes,address,bytes,uint64,uint64,uint64,uint64,uint64,uint256,uint64,uint64,bytes,uint64,uint256,bool,uint8,uint64,address[],address[],bytes,uint8,bool,(uint64,uint64,uint64)) fileInfo) returns()
func (_Store *StoreTransactor) DeleteFileFromSector(opts *bind.TransactOpts, sectorInfo SectorInfo, fileInfo FileInfo) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "DeleteFileFromSector", sectorInfo, fileInfo)
}

// DeleteFileFromSector is a paid mutator transaction binding the contract method 0x0047c003.
//
// Solidity: function DeleteFileFromSector((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sectorInfo, (bytes,address,bytes,uint64,uint64,uint64,uint64,uint64,uint256,uint64,uint64,bytes,uint64,uint256,bool,uint8,uint64,address[],address[],bytes,uint8,bool,(uint64,uint64,uint64)) fileInfo) returns()
func (_Store *StoreSession) DeleteFileFromSector(sectorInfo SectorInfo, fileInfo FileInfo) (*types.Transaction, error) {
	return _Store.Contract.DeleteFileFromSector(&_Store.TransactOpts, sectorInfo, fileInfo)
}

// DeleteFileFromSector is a paid mutator transaction binding the contract method 0x0047c003.
//
// Solidity: function DeleteFileFromSector((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sectorInfo, (bytes,address,bytes,uint64,uint64,uint64,uint64,uint64,uint256,uint64,uint64,bytes,uint64,uint256,bool,uint8,uint64,address[],address[],bytes,uint8,bool,(uint64,uint64,uint64)) fileInfo) returns()
func (_Store *StoreTransactorSession) DeleteFileFromSector(sectorInfo SectorInfo, fileInfo FileInfo) (*types.Transaction, error) {
	return _Store.Contract.DeleteFileFromSector(&_Store.TransactOpts, sectorInfo, fileInfo)
}

// DeleteSecotr is a paid mutator transaction binding the contract method 0x23de5b98.
//
// Solidity: function DeleteSecotr((address,uint64) sectorRef) returns()
func (_Store *StoreTransactor) DeleteSecotr(opts *bind.TransactOpts, sectorRef SectorRef) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "DeleteSecotr", sectorRef)
}

// DeleteSecotr is a paid mutator transaction binding the contract method 0x23de5b98.
//
// Solidity: function DeleteSecotr((address,uint64) sectorRef) returns()
func (_Store *StoreSession) DeleteSecotr(sectorRef SectorRef) (*types.Transaction, error) {
	return _Store.Contract.DeleteSecotr(&_Store.TransactOpts, sectorRef)
}

// DeleteSecotr is a paid mutator transaction binding the contract method 0x23de5b98.
//
// Solidity: function DeleteSecotr((address,uint64) sectorRef) returns()
func (_Store *StoreTransactorSession) DeleteSecotr(sectorRef SectorRef) (*types.Transaction, error) {
	return _Store.Contract.DeleteSecotr(&_Store.TransactOpts, sectorRef)
}

// UpdateSectorInfo is a paid mutator transaction binding the contract method 0x2384a6aa.
//
// Solidity: function UpdateSectorInfo((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sector) returns()
func (_Store *StoreTransactor) UpdateSectorInfo(opts *bind.TransactOpts, sector SectorInfo) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "UpdateSectorInfo", sector)
}

// UpdateSectorInfo is a paid mutator transaction binding the contract method 0x2384a6aa.
//
// Solidity: function UpdateSectorInfo((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sector) returns()
func (_Store *StoreSession) UpdateSectorInfo(sector SectorInfo) (*types.Transaction, error) {
	return _Store.Contract.UpdateSectorInfo(&_Store.TransactOpts, sector)
}

// UpdateSectorInfo is a paid mutator transaction binding the contract method 0x2384a6aa.
//
// Solidity: function UpdateSectorInfo((address,uint64,uint64,uint64,uint8,uint256,uint256,uint64,uint64,uint64,bool,bytes[]) sector) returns()
func (_Store *StoreTransactorSession) UpdateSectorInfo(sector SectorInfo) (*types.Transaction, error) {
	return _Store.Contract.UpdateSectorInfo(&_Store.TransactOpts, sector)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _node) returns()
func (_Store *StoreTransactor) Initialize(opts *bind.TransactOpts, _node common.Address) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "initialize", _node)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _node) returns()
func (_Store *StoreSession) Initialize(_node common.Address) (*types.Transaction, error) {
	return _Store.Contract.Initialize(&_Store.TransactOpts, _node)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _node) returns()
func (_Store *StoreTransactorSession) Initialize(_node common.Address) (*types.Transaction, error) {
	return _Store.Contract.Initialize(&_Store.TransactOpts, _node)
}

// StoreCreateSectorEventIterator is returned from FilterCreateSectorEvent and is used to iterate over the raw logs and unpacked data for CreateSectorEvent events raised by the Store contract.
type StoreCreateSectorEventIterator struct {
	Event *StoreCreateSectorEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreCreateSectorEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreCreateSectorEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreCreateSectorEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreCreateSectorEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreCreateSectorEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreCreateSectorEvent represents a CreateSectorEvent event raised by the Store contract.
type StoreCreateSectorEvent struct {
	EventType   uint8
	BlockHeight *big.Int
	WalletAddr  common.Address
	SectorId    uint64
	ProvLevel   uint8
	Size        uint64
	IsPlots     bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCreateSectorEvent is a free log retrieval operation binding the contract event 0xc3aecd94f85ba0fad5908b524eaaa61cce4b92e04937d32d159f1d5bd8d029fb.
//
// Solidity: event CreateSectorEvent(uint8 eventType, uint256 blockHeight, address walletAddr, uint64 sectorId, uint8 provLevel, uint64 size, bool isPlots)
func (_Store *StoreFilterer) FilterCreateSectorEvent(opts *bind.FilterOpts) (*StoreCreateSectorEventIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "CreateSectorEvent")
	if err != nil {
		return nil, err
	}
	return &StoreCreateSectorEventIterator{contract: _Store.contract, event: "CreateSectorEvent", logs: logs, sub: sub}, nil
}

// WatchCreateSectorEvent is a free log subscription operation binding the contract event 0xc3aecd94f85ba0fad5908b524eaaa61cce4b92e04937d32d159f1d5bd8d029fb.
//
// Solidity: event CreateSectorEvent(uint8 eventType, uint256 blockHeight, address walletAddr, uint64 sectorId, uint8 provLevel, uint64 size, bool isPlots)
func (_Store *StoreFilterer) WatchCreateSectorEvent(opts *bind.WatchOpts, sink chan<- *StoreCreateSectorEvent) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "CreateSectorEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreCreateSectorEvent)
				if err := _Store.contract.UnpackLog(event, "CreateSectorEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateSectorEvent is a log parse operation binding the contract event 0xc3aecd94f85ba0fad5908b524eaaa61cce4b92e04937d32d159f1d5bd8d029fb.
//
// Solidity: event CreateSectorEvent(uint8 eventType, uint256 blockHeight, address walletAddr, uint64 sectorId, uint8 provLevel, uint64 size, bool isPlots)
func (_Store *StoreFilterer) ParseCreateSectorEvent(log types.Log) (*StoreCreateSectorEvent, error) {
	event := new(StoreCreateSectorEvent)
	if err := _Store.contract.UnpackLog(event, "CreateSectorEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreDeleteSectorEventIterator is returned from FilterDeleteSectorEvent and is used to iterate over the raw logs and unpacked data for DeleteSectorEvent events raised by the Store contract.
type StoreDeleteSectorEventIterator struct {
	Event *StoreDeleteSectorEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreDeleteSectorEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreDeleteSectorEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreDeleteSectorEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreDeleteSectorEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreDeleteSectorEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreDeleteSectorEvent represents a DeleteSectorEvent event raised by the Store contract.
type StoreDeleteSectorEvent struct {
	EventType   uint8
	BlockHeight *big.Int
	WalletAddr  common.Address
	SectorId    uint64
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDeleteSectorEvent is a free log retrieval operation binding the contract event 0x4fca90fd1b1cd962cf67f21703f1380572181450811cdd09c4add7ed1cb0c12c.
//
// Solidity: event DeleteSectorEvent(uint8 eventType, uint256 blockHeight, address walletAddr, uint64 sectorId)
func (_Store *StoreFilterer) FilterDeleteSectorEvent(opts *bind.FilterOpts) (*StoreDeleteSectorEventIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "DeleteSectorEvent")
	if err != nil {
		return nil, err
	}
	return &StoreDeleteSectorEventIterator{contract: _Store.contract, event: "DeleteSectorEvent", logs: logs, sub: sub}, nil
}

// WatchDeleteSectorEvent is a free log subscription operation binding the contract event 0x4fca90fd1b1cd962cf67f21703f1380572181450811cdd09c4add7ed1cb0c12c.
//
// Solidity: event DeleteSectorEvent(uint8 eventType, uint256 blockHeight, address walletAddr, uint64 sectorId)
func (_Store *StoreFilterer) WatchDeleteSectorEvent(opts *bind.WatchOpts, sink chan<- *StoreDeleteSectorEvent) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "DeleteSectorEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreDeleteSectorEvent)
				if err := _Store.contract.UnpackLog(event, "DeleteSectorEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeleteSectorEvent is a log parse operation binding the contract event 0x4fca90fd1b1cd962cf67f21703f1380572181450811cdd09c4add7ed1cb0c12c.
//
// Solidity: event DeleteSectorEvent(uint8 eventType, uint256 blockHeight, address walletAddr, uint64 sectorId)
func (_Store *StoreFilterer) ParseDeleteSectorEvent(log types.Log) (*StoreDeleteSectorEvent, error) {
	event := new(StoreDeleteSectorEvent)
	if err := _Store.contract.UnpackLog(event, "DeleteSectorEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
